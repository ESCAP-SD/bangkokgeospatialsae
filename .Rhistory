geom_spatraster(aes(fill = log(avg_rad)), data = ntl, color = NA) +
scale_fill_distiller("Nightlights (log)", palette = "Spectral")
ggplot() +
geom_spatraster(aes(fill = log(avg_rad)), data = ntl) +
scale_fill_distiller("Nightlights (log)", palette = "Spectral")
ntl
plot(ntl$avg_rad)
plot(log(ntl$avg_rad))
plot(ntl$avg_rad)
# extract to grids!
extractntl <- extract(ntl, kgrid, fun = mean, na.rm = TRUE)
# what does it look like?
extractntl
# what does it look like?
head(extractntl)
# extract to grids!
extractntl <- extract(ntl$avg_rad, kgrid, fun = mean, na.rm = TRUE)
# what does it look like?
head(extractntl)
# add to grids
kgrid <- kgrid |>
left_join(extractntl, by = c("id" = "ID"))
kgrid
# plot it
ggplot() +
geom_spatvector(data = kgrid, aes(fill = log(avg_rad)), color = NA)
# plot it
ggplot() +
geom_spatvector(data = kgrid, aes(fill = log(avg_rad)), color = NA) +
scale_fill_distiller("Nightlights", palette = "Spectral")
# extract to grids!
extractntl <- extract(ntl, kgrid, fun = mean, na.rm = TRUE)
# what does it look like?
head(extractntl)
kgrid
library(exactextractr)
?exact_extract
kgrid
# extract to grids!
extractntl <- exact_extract(ntl, kgrid, fun = mean, na.rm = TRUE, append_cols = "id")
# we want to pull data for a specific region!
# let's use Korea
kgrid <- read_sf("vectorfilesdata/kgrid.shp")
# to lon/lat
kgrid <- project(kgrid, "EPSG:4326")
kgridbox <- ext(kgrid)
kgridbox
# extract to grids!
extractntl <- exact_extract(ntl, kgrid, fun = mean, na.rm = TRUE, append_cols = "id")
# we want to pull data for a specific region!
# let's use Korea
kgrid <- read_sf("vectorfilesdata/kgrid.shp")
library(sf)
# we want to pull data for a specific region!
# let's use Korea
kgrid <- read_sf("vectorfilesdata/kgrid.shp")
kgrid
# to lon/lat
kgrid <- project(kgrid, "EPSG:4326")
# to lon/lat
kgrid <- st_transform(kgrid, "EPSG:4326")
kgridbox <- st_box(kgrid)
kgridbox <- st_bbox(kgrid)
# Let's take a look at nighttime lights
# find more information on the GEE website. Just search for NOAA/VIIRS/DNB/MONTHLY_V1/VCMCFG in google
# this is monthly, let's look at two years of data
x <- "NOAA/VIIRS/DNB/MONTHLY_V1/VCMCFG" |>
gd_collection_from_name() |> # COLLECTION, because there are many images
# we are going to SEARCH, not download
gd_search(
start_date = "2022-01-01",
end_date = "2024-10-31",
region = kgridbox,
crs = "EPSG:4326", # lat/lon
scale = 500
)
# list the names and timing.
# we can create a list of image ids and the associated dates
imageresults <- gd_properties(x)
imageresults
# turn date variable into a date variable
imageresults$date <- as_date(imageresults$date)
head(imageresults)
# let's download the first image!
raster <- imageresults$id[1] |>
gd_image_from_id() |>
gd_download(
filename = "ntl.tif",
region = kgridbox,
scale = 500,
crs = 'EPSG:4326',
dtype = 'uint16',
overwrite = TRUE, # overwrite if it exists
silent = FALSE
)
# let's take a look at the raster
ntl <- rast(raster)
plot(ntl$avg_rad)
# extract to grids!
extractntl <- exact_extract(ntl, kgrid, fun = mean, na.rm = TRUE, append_cols = "id")
# extract to grids!
extractntl <- exact_extract(ntl, kgrid, fun = mean, append_cols = "id")
# extract to grids!
extractntl <- exact_extract(ntl, kgrid, fun = "mean", append_cols = "id")
# extract to grids!
extractntl <- exact_extract(ntl, kgrid, fun = "mean", na.rm = TRUE, append_cols = "id")
# extract to grids!
extractntl <- exact_extract(ntl, kgrid, fun = "mean", append_cols = "id")
# what does it look like?
head(extractntl)
# add to grids
kgrid <- kgrid |>
left_join(extractntl, by = "id")
# plot it
ggplot() +
geom_spatvector(data = kgrid, aes(fill = log(mean.avg_rad)), color = NA) +
scale_fill_distiller("Nightlights", palette = "Spectral")
# Let's try land class. This is MUCH more difficult.
x <- "COPERNICUS/Landcover/100m/Proba-V-C3/Global" |>
gd_collection_from_name() |> # COLLECTION, because there are many images
# we are going to SEARCH, not download
gd_search(
start_date = "2022-01-01",
end_date = "2024-10-31",
region = kgridbox,
crs = "EPSG:4326", # lat/lon
scale = 500
)
imageresults <- gd_properties(x)
imageresults
# Let's try land class. This is MUCH more difficult.
x <- "ESA/WorldCover/v200" |>
gd_collection_from_name() |> # COLLECTION, because there are many images
# we are going to SEARCH, not download
gd_search(
start_date = "2022-01-01",
end_date = "2024-10-31",
region = kgridbox,
crs = "EPSG:4326", # lat/lon
scale = 500
)
imageresults <- gd_properties(x)
imageresults
# Let's try land class. This is MUCH more difficult.
# make sure to check the DATES!
x <- "ESA/WorldCover/v200" |>
gd_collection_from_name() |> # COLLECTION, because there are many images
# we are going to SEARCH, not download
gd_search(
start_date = "2021-01-01",
end_date = "2024-10-31",
region = kgridbox,
crs = "EPSG:4326", # lat/lon
scale = 500
)
imageresults <- gd_properties(x)
imageresults
kgridbox
# Let's take a look at nighttime lights
# find more information on the GEE website. Just search for NOAA/VIIRS/DNB/MONTHLY_V1/VCMCFG in google
# this is monthly, let's look at two years of data
x <- "NOAA/VIIRS/DNB/MONTHLY_V1/VCMCFG" |>
gd_collection_from_name() |> # COLLECTION, because there are many images
# we are going to SEARCH, not download
gd_search(
start_date = "2022-01-01",
end_date = "2024-10-31",
region = kgridbox,
crs = "EPSG:4326", # lat/lon
scale = 500
)
# list the names and timing.
# we can create a list of image ids and the associated dates
imageresults <- gd_properties(x)
imageresults
# Let's try land class. This is MUCH more difficult.
# make sure to check the DATES!
x <- "COPERNICUS/Landcover/100m/Proba-V-C3/Global" |>
gd_collection_from_name() |> # COLLECTION, because there are many images
# we are going to SEARCH, not download
gd_search(
start_date = "2015-01-01",
end_date = "2020-01-01",
region = kgridbox,
crs = "EPSG:4326", # lat/lon
scale = 500
)
imageresults <- gd_properties(x)
imageresults
# turn date variable into a date variable
imageresults$date <- as_date(imageresults$date)
head(imageresults)
# let's download the LAST image
raster <- imageresults$id[length(imageresults$id)] |>
gd_image_from_id() |>
gd_download(
filename = "ntl.tif",
region = kgridbox,
scale = 500,
crs = 'EPSG:4326',
dtype = 'uint16',
overwrite = TRUE, # overwrite if it exists
silent = FALSE
)
lc <- rast(raster)
lc
# check names
names(lc)
# we are going to use the "coverfraction" variables
lc <- lc[c("bare-coverfraction", "urban-coverfraction", "crops-coverfraction",
"grass-coverfraction", "moss-coverfraction", "shrub-coverfraction",
"tree-coverfraction")]
lc
lc <- rast(raster)
# check names
names(lc)
# we are going to use the "coverfraction" variables
lc <- lc[[c("bare-coverfraction", "urban-coverfraction", "crops-coverfraction",
"grass-coverfraction", "moss-coverfraction", "shrub-coverfraction",
"tree-coverfraction")]]
lc
lc <- exact_extract(lc, kgrid, fun = "mean", append_cols = "id")
lc
# we are going to use the "coverfraction" variables
lc <- lc[[c("bare-coverfraction", "urban-coverfraction", "crops-coverfraction",
"grass-coverfraction", "shrub-coverfraction", "tree-coverfraction")]]
lc <- rast(raster)
# check names
names(lc)
# we are going to use the "coverfraction" variables
lc <- lc[[c("bare-coverfraction", "urban-coverfraction", "crops-coverfraction",
"grass-coverfraction", "shrub-coverfraction", "tree-coverfraction")]]
lc <- exact_extract(lc, kgrid, fun = "mean", append_cols = "id")
lc
# add to grids
kgrid <- kgrid |>
left_join(lc, by = "id")
kgrid
# plot urban
ggplot() +
geom_spatvector(data = kgrid, aes(fill = log(mean.urban-coverfraction)), color = NA) +
scale_fill_distiller("Nightlights", palette = "Spectral")
# plot urban
ggplot() +
geom_spatvector(data = kgrid, aes(fill = log(`mean.urban-coverfraction`)), color = NA) +
scale_fill_distiller("Nightlights", palette = "Spectral")
# plot urban
ggplot() +
geom_spatvector(data = kgrid, aes(fill = `mean.urban-coverfraction`), color = NA) +
scale_fill_distiller("Urban fraction", palette = "Spectral")
# plot urban
ggplot() +
geom_spatvector(data = kgrid, aes(fill = `mean.urban-coverfraction`), color = NA) +
scale_fill_distiller("Urban\nfraction", palette = "Spectral")
# plot urban
ggplot() +
geom_spatvector(data = kgrid, aes(fill = `mean.urban-coverfraction`), color = NA) +
scale_fill_distiller("Urban\npct.", palette = "Spectral")
colnames(kgrid)
# plot crops
ggplot() +
geom_spatvector(data = kgrid, aes(fill = `mean.crops-coverfraction`), color = NA) +
scale_fill_distiller("Crops\npct.", palette = "Spectral")
library(cowplot)
# plot both!
g1 <- ggplot() +
geom_spatvector(data = kgrid, aes(fill = `mean.urban-coverfraction`), color = NA) +
scale_fill_distiller("Urban\npct.", palette = "Spectral")
g2 <- ggplot() +
geom_spatvector(data = kgrid, aes(fill = `mean.crops-coverfraction`), color = NA) +
scale_fill_distiller("Crops\npct.", palette = "Spectral")
plot_grid(g1, g2)
# MPC
library(rstac)
library(GeoLink)
# GeoLink, rgeedim, and mpc examples
library(GeoLink)
adm4_chirps <- geolink_chirps(time_unit = "month",
start_date = "2019-01-01",
end_date = "2019-12-31",
shp_dt = kgrid,
extract_fun = "mean")
# let's pull some pollution data
s_obj <- stac("https://planetarycomputer.microsoft.com/api/stac/v1")
it_obj <- s_obj %>%
stac_search(collections = "sentinel-5p-l2-netcdf",
bbox = kgridbox,
datetime = "2019-01-01/2019-12-31",
limit = 1000) %>%
get_request() %>%
items_sign(sign_fn = sign_planetary_computer())
# let's pull some pollution data
s_obj <- stac("https://planetarycomputer.microsoft.com/api/stac/v1")
it_obj <- s_obj %>%
stac_search(collections = "sentinel-5p-l2-netcdf",
bbox = kgridbox,
datetime = "2019-01-01/2019-12-31",
limit = 1000) %>%
get_request() %>%
items_sign(sign_fn = sign_planetary_computer())
it_obj
paste0("/vsicurl/", it_obj$features[[i]]$assets[[indicator]]$href)
it_obj$features[[1]]
it_obj$features[[1]]$assets
it_obj$features[[1]]
it_obj$features[[1]]$assets
# let's just download the first one
url <-
paste0("/vsicurl/", it_obj$features[[1]]$assets$so2$href)
# let's just download the first one
url <-paste0("/vsicurl/", it_obj$features[[1]]$assets$so2$href)
url
pol <- rast(url)
pol
it_obj$features[[1]]$assets
plot(pol)
pol
names(pol)
# it has a BUNCH of stuff!
names(pol)
pol <- pol[["aerosol_index_340_380"]]
pol
# plot it
plot(pol)
# extract to grids
extractpol <- exact_extract(pol, kgrid, fun = "mean", append_cols = "id")
extractpol
summary(extractpol)
# note that the bbox here needs to be a little different!
newbox <- c(kgridbox[1], kgridbox[3], kgridbox[2], kgridbox[4])
# let's pull some pollution data
s_obj <- stac("https://planetarycomputer.microsoft.com/api/stac/v1")
it_obj <- s_obj %>%
stac_search(collections = "sentinel-5p-l2-netcdf",
bbox = kgridbox,
datetime = "2019-01-01/2019-12-31",
limit = 1000) %>%
get_request() %>%
items_sign(sign_fn = sign_planetary_computer())
# many things!
it_obj
# let's just download the first one
url <- paste0("/vsicurl/", it_obj$features[[1]]$assets$so2$href)
pol <- rast(url)
# also get the bounding box for that area
list(it_obj$features[[i]]$bbox)
# also get the bounding box for that area
list(it_obj$features[[1]]$bbox)
# also get the bounding box for that area
bbox <- list(it_obj$features[[1]]$bbox)
# load raster
rall <- rast(url)
# keep just the layer we want and transform to array
rall <- as.array(rall[["aerosol_index_340_380"]])
rall
summary(rall)
# now back to raster with the appropriate extent and CRS
rall <- rast(rall, crs = "EPSG:4326", extent = ext(c(bbox[[1]][1], bbox[[1]][3], bbox[[1]][2], bbox[[1]][4])))
rall
plot(rall)
# extract to grids
extractpol <- exact_extract(rall, kgrid, fun = "mean", append_cols = "id")
extractpol
kgrids <- kgrid |>
left_join(extractpol |> rename(so2 = mean), by = "id")
# plot it
ggplot() +
geom_spatvector(data = kgrids, aes(fill = so2), color = NA) +
scale_fill_distiller("SO2", palette = "Spectral")
# note that the bbox here needs to be a little different!
newbox <- c(kgridbox[1], kgridbox[3], kgridbox[2], kgridbox[4])
# let's pull some pollution data
s_obj <- stac("https://planetarycomputer.microsoft.com/api/stac/v1")
it_obj <- s_obj %>%
stac_search(collections = "sentinel-5p-l2-netcdf",
bbox = newbox,
datetime = "2019-01-01/2019-12-31",
limit = 1000) %>%
get_request() %>%
items_sign(sign_fn = sign_planetary_computer())
# let's pull some pollution data
s_obj <- stac("https://planetarycomputer.microsoft.com/api/stac/v1")
it_obj <- s_obj %>%
stac_search(collections = "sentinel-5p-l2-netcdf",
bbox = kgridbox,
datetime = "2019-01-01/2019-12-31",
limit = 1000) %>%
get_request() %>%
items_sign(sign_fn = sign_planetary_computer())
# let's pull some pollution data
s_obj <- stac("https://planetarycomputer.microsoft.com/api/stac/v1")
it_obj <- s_obj %>%
stac_search(collections = "sentinel-5p-l2-netcdf",
bbox = kgridbox,
datetime = "2019-01-01/2019-12-31",
limit = 1000) %>%
get_request() %>%
items_sign(sign_fn = sign_planetary_computer())
# many things!
it_obj
# let's just download the first one
url <- paste0("/vsicurl/", it_obj$features[[1]]$assets$so2$href)
# also get the bounding box for that area
bbox <- list(it_obj$features[[1]]$bbox)
# load raster
rall <- rast(url)
# keep just the layer we want and transform to array
rall <- as.array(rall[["aerosol_index_340_380"]])
# now back to raster with the appropriate extent and CRS
rall <- rast(rall, crs = "EPSG:4326", extent = ext(c(bbox[[1]][1], bbox[[1]][3], bbox[[1]][2], bbox[[1]][4])))
rall
# now back to raster with the appropriate extent and CRS
rall <- rast(rall, crs = "EPSG:4326", extent = ext(c(bbox[[1]][1], bbox[[1]][3], bbox[[1]][2], bbox[[1]][4])))
# extract to grids
extractpol <- exact_extract(rall, kgrid, fun = "mean", append_cols = "id")
extractpol
head(extractpol)
kgrids <- kgrid |>
left_join(extractpol |> rename(so2 = mean), by = "id")
# plot it
ggplot() +
geom_spatvector(data = kgrids, aes(fill = so2), color = NA) +
scale_fill_distiller("SO2", palette = "Spectral")
#| label: setup
#| include: false
knitr::knit_hooks$set(crop = knitr::hook_pdfcrop)
library(tidyverse)
library(sf)
library(terra)
library(tidyterra)
library(cowplot)
library(kableExtra)
library(haven)
Sys.setenv("RETICULATE_PYTHON" = "~/Library/r-miniconda-arm64/envs/RGEEDIM/bin/python3.9")
library(rgeedim)
# short duration token
gd_authenticate(auth_mode = "gcloud")
# initialize and should be good to go
gd_initialize()
kdisgreen <- "#006334"
accent <- "#340063"
accent2 <- "#633400"
kdisgray <- "#A7A9AC"
kshape <- read_sf("rastersdata/kshape.shp")
kshape <- read_sf("vectorfilesdata/kshape.shp")
kshape
kgrid <- rast(kshape, res = 5000)
kgrid <- as.polygons(kgrid)
kgrid
ggplot() + geom_spatvector(data = kgrid)
intersection <- intersect(kgrid, kshape)
intersection <- intersect(kgrid, kshape)
kgrid <- kgrid |>
filter(id %in% intersection$id)
intersection
intersection <- terra::intersect(kgrid, kshape)
kgrid <- kgrid |>
filter(id %in% intersection$id)
kgrid
kgrid$id <- 1:nrow(kgrid)
intersection <- terra::intersect(kgrid, kshape)
kgrid <- kgrid |>
filter(id %in% intersection$id)
kgrid
intersection
kgrid <- rast(kshape, res = 5000)
kgrid <- as.polygons(kgrid)
kgrid$id <- 1:nrow(kgrid)
intersection <- terra::intersect(kgrid, kshape)
kgrid <- kgrid |>
filter(id %in% intersection$id)
kgrid
intersection
kshape <- read_sf("vectorfilesdata/kshape.shp")
kgrid <- rast(kshape, res = 5000)
kgrid <- as.polygons(kgrid)
kgrid$id <- 1:nrow(kgrid)
kgrid
kshape
intersection <- terra::intersect(kgrid, kshape)
intersection
ggplot() + geom_spatvector(data = kshape) + geom_spatvector(data = kgrid)
ggplot() + geom_spatvector(data = kshape) + geom_spatvector(data = kgrid, alpha = 0.5)
intersection <- terra::intersects(kgrid, kshape)
intersection <- terra::intersect(kgrid, kshape)
intersection
intersection <- intersect(kgrid, kshape)
intersection
intersection
kgrid
kshape
intersection = intersect(kgrid, kshape)
intersection
kgrid <- project(kgrid, crs(kshape))
kgrid
kshape
kshape <- read_sf("vectorfilesdata/kshape.shp")
kgrid <- rast(kshape, res = 5000)
kgrid <- as.polygons(kgrid)
kgrid$id <- 1:nrow(kgrid)
kshape <- read_sf("vectorfilesdata/kshape.shp")
kgrid <- rast(kshape, res = 10000)
kgrid <- as.polygons(kgrid)
kgrid$id <- 1:nrow(kgrid)
summary(kgrid)
ggplot() +
geom_spatvector(data = kgrid) +
theme_bw()
kgrid <- project(kgrid, crs(kshape))
intersection = intersect(kgrid, kshape)
intersection
terra::intersect(kgrid, kshape)

bbox$centroid <- st_centroid(bbox)
bbox$centroid <- st_coordinates(bbox$centroid)
bbox
colnames(bbox)
bbox$centroid
bbox$centroid[1]
bbox$centroid[[1]]
bbox$centroid$X
dim(bbox$centroid)
names(bbox$centroid)
colnames(bbox$centroid)
bbox$centroid[["X"]]
bbox$centroid$X
bbox$centroid$centroid.X
bbox |> arrange(centroid)
bbox <- bbox |>
arrange(centroid)
# download one raster
r <- rast(links[[1]])
# reorder links
links <- links[bbox$id]
links
bbox$id
# reorder links
links <- links[bbox$id]
# download one raster
r <- rast(links[[1]])
count <- 1
for (i in links[1:length(links)]){
tempr <- rast(i)
r <- mosaic(r, tempr, fun = "min")
print(count/length(links))
count <- count + 1
}
library(knitr)
library(sf)
library(sp)
library(tidyverse)
library(gganimate)
library(transformr)
library(gifski)
library(ggthemes)
library(scales)
library(RColorBrewer)
library(kableExtra)
library(ggpubr)
library(rticles)
library(stats)
library(broom)
library(extrafont)
library(fixest)
library(modelsummary)
library(openxlsx)
library(raster)
library(lubridate)
library(png)
library(cowplot)
library(did2s)
library(haven)
library(parallel)
library(magick)
theme_set(theme_bw())
loadfonts()  # Must be run once in each session (markdown is a new "session" each time you render/knit)
# Functions to change format of numbers
reportP <- function(pValue){
if (pValue < 0.001){
result <- "p < 0.001"
} else {
result <- sprintf("p = %.3f", pValue) # inserts a float into a string and simultaneously do rounding
}
return(result)
}
reportDec <- function(dec){
result <- sprintf("%.3f", dec) # inserts a float into a string and simultaneously do rounding
return(result)
}
reportPercent <- function(dec){
result <- sprintf("%.1f", 100*dec) # inserts a float into a string and simultaneously do rounding
return(result)
}
commaNum <- function(large){
result <- formatC(large, big.mark = ",", format = "f", digits = 0)
return(result)
}
# Let's create some data for Kabani
kabani <- as_tibble(matrix(NA, nrow = 24, ncol = 1))
colnames(kabani) <- c("date")
kabani$date <- seq.Date(from = as.Date("2022-05-01"), by = "month", length.out = 24)
kabani$povertyline <- 1.9
kabani$meanincome <- c(rep(1.69, 12), rep(1.83, 12))
kabani$income <- c(1.31, 0.79, 2.47, 1.22, 1.69, 1.45, 1.41, 1.05, 4.01, 0.91, 0.96,
2.94, 2.15, 2.06, 1.18, 1.21, 1.73, 3.29, 2.29, 1.27, 1.89, 1.66, 1.39, 1.79)
kabani$poorannual <- "Poor"
kabani$poorx <- 0.5
kabani$poormonthly <- "Poor"
kabani$poormonthly[kabani$income>=kabani$povertyline] <- "Not poor"
kabani2 <- kabani %>%
mutate(datex = date) %>%
dplyr::select(-date)
kabani2$income <- kabani2$income + 0.25
kabani2$income[kabani2$poormonthly=="Poor"] <- kabani2$income[kabani2$poormonthly=="Poor"] - 0.5
# NOTE THE ABSOLUTE PATH!
# bad practice, but I don't want to make this data availalble on Github yet.
icrisat <- read_dta("/Users/Josh/Dropbox/Papers/merfeldmorduch2/data/icrisat/icrisat.dta")
annualmean <- weighted.mean(icrisat$in_poverty_wave, icrisat$weight)
monthlymean <- weighted.mean(icrisat$in_poverty, icrisat$weight)
temp <- icrisat
# wrapper <- function(i){
#   set.seed(23405 + i)
#   temp$random <- runif(nrow(temp))
#   return <- c(temp %>%
#     group_by(hhid, year) %>%
#     arrange(hhid, year, random) %>%
#     filter(row_number()==1) %>%
#     ungroup() %>%
#     summarize(in_poverty = weighted.mean(in_poverty, weight)) %>%
#     pull(in_poverty))
# }
# results <- mclapply(1:10000, wrapper)
# # saving so I don't have to run this every time I want to knit
# saveRDS(results, "results.rds")
results <- readRDS("results.rds")
results <- unlist(results)
results <- as_tibble(results)
colnames(results) <- "results"
results$sim <- 1:nrow(results)
results$temp <- 1
ggplot(results) +
geom_histogram(aes(x = results, y = after_stat(count / sum(count))), color = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(temp)
results
nrow(results)
ggplot(results) +
geom_histogram(aes(x = results, y = after_stat(count / sum(count))), color = "transparent", fill = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(temp)
ggplot(results %>% filter(hist<=1000)) +
geom_histogram(aes(x = results, y = after_stat(count / sum(count))), color = "transparent", fill = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(temp)
ggplot(results %>% filter(sim<=1000)) +
geom_histogram(aes(x = results, y = after_stat(count / sum(count))), color = "transparent", fill = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(temp)
annualmean <- weighted.mean(icrisat$in_poverty_wave, icrisat$weight)
monthlymean <- weighted.mean(icrisat$in_poverty, icrisat$weight)
temp <- icrisat
# wrapper <- function(i){
#   set.seed(23405 + i)
#   temp$random <- runif(nrow(temp))
#   return <- c(temp %>%
#     group_by(hhid, year) %>%
#     arrange(hhid, year, random) %>%
#     filter(row_number()==1) %>%
#     ungroup() %>%
#     summarize(in_poverty = weighted.mean(in_poverty, weight)) %>%
#     pull(in_poverty))
# }
# results <- mclapply(1:10000, wrapper)
# # saving so I don't have to run this every time I want to knit
# saveRDS(results, "results.rds")
results <- readRDS("results.rds")
results <- unlist(results)
results <- as_tibble(results)
colnames(results) <- "results"
results$sim <- 1:nrow(results)
results$temp <- 1
results
annualmean <- weighted.mean(icrisat$in_poverty_wave, icrisat$weight)
monthlymean <- weighted.mean(icrisat$in_poverty, icrisat$weight)
temp <- icrisat
# wrapper <- function(i){
#   set.seed(23405 + i)
#   temp$random <- runif(nrow(temp))
#   return <- c(temp %>%
#     group_by(hhid, year) %>%
#     arrange(hhid, year, random) %>%
#     filter(row_number()==1) %>%
#     ungroup() %>%
#     summarize(in_poverty = weighted.mean(in_poverty, weight)) %>%
#     pull(in_poverty))
# }
# results <- mclapply(1:10000, wrapper)
# # saving so I don't have to run this every time I want to knit
# saveRDS(results, "results.rds")
results <- readRDS("results.rds")
results <- unlist(results)
results <- as_tibble(results)
colnames(results) <- "results"
results$sim <- 1:nrow(results)
temp <- c()
for (i in 1:1000){
temp <- rbind(temp, cbind(results[1:i,], hist = i))
}
temp
temp <- as_tibble(temp)
summary(temp |> filter(hist<=1000))
ggplot(temp %>% filter(hist<=1000)) +
geom_histogram(aes(x = results), color = "#006334", binwidth = 0.0005) +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(hist, state_length = 1, transition_length = 2)
annualmean <- weighted.mean(icrisat$in_poverty_wave, icrisat$weight)
monthlymean <- weighted.mean(icrisat$in_poverty, icrisat$weight)
temp <- icrisat
# wrapper <- function(i){
#   set.seed(23405 + i)
#   temp$random <- runif(nrow(temp))
#   return <- c(temp %>%
#     group_by(hhid, year) %>%
#     arrange(hhid, year, random) %>%
#     filter(row_number()==1) %>%
#     ungroup() %>%
#     summarize(in_poverty = weighted.mean(in_poverty, weight)) %>%
#     pull(in_poverty))
# }
# results <- mclapply(1:10000, wrapper)
# # saving so I don't have to run this every time I want to knit
# saveRDS(results, "results.rds")
results <- readRDS("results.rds")
results <- unlist(results)
results <- as_tibble(results)
colnames(results) <- "results"
results$sim <- 1:nrow(results)
temp <- c()
for (i in 1:1000){
temp <- rbind(temp, cbind(results[1:i,], hist = i))
}
temp <- as_tibble(temp)
ggplot(temp %>% filter(hist %in% c(999, 1000))) +
geom_histogram(aes(x = results, y = after_stat(count / sum(count))), color = "transparent", fill = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(hist, state_length = 1, transition_length = 2)
ggplot(temp %>% filter(hist %in% c(999, 1000))) +
geom_histogram(aes(x = results)), color = "transparent", fill = "transparent") +
ggplot(temp %>% filter(hist %in% c(999, 1000))) +
geom_histogram(aes(x = results)), color = "transparent", fill = "transparent") +
ggplot(temp %>% filter(hist %in% c(999, 1000))) +
geom_histogram(aes(x = results), color = "transparent", fill = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(hist, state_length = 1, transition_length = 2)
ggplot(temp %>% filter(hist %in% c(999, 1000))) +
geom_histogram(aes(x = results), color = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(hist, state_length = 1, transition_length = 2)
temp
library(haven)
temp <- read_sav("/Users/Josh/Dropbox/Papers/malawiimagery/data/mics/Malawi MICS6 SPSS Datasets/hl.sav")
View(temp)
knitr::opts_chunk$set(echo = FALSE, dev = "png") # NOTE: switched to png instead of pdf to decrease size of the resulting pdf
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
#ifelse(options$size != "a", paste0("\n \\", "tiny","\n\n", x, "\n\n \\normalsize"), x)
ifelse(options$size != "normalsize", paste0("\n \\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
})
library(tidyverse)
library(kableExtra)
library(fixest)
library(ggpubr)
library(RColorBrewer)
library(haven)
library(mfx)
library(nnet)
library(survival)
library(survminer)
df <- read_dta("week3files/data.dta")
data(iris)
multinomresults <- multinom(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = iris)
library(survminer)
KM <- survfit(Surv(time = time, event = status) ~ 1, data = diabetic)
ggsurvplot(KM) +
labs(y = "Survival probability", x = "Time (months)") +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
ggsurvplot(KM) +
labs(y = "Survival probability", x = "Time (months)")
ggsurvplot(KM)$plot +
labs(y = "Survival probability", x = "Time (months)") +
scale_color_discrete("Treatment:", labels = c("No", "Yes")) +
theme(legend.position = c(0.1, 0.2)) +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
KM <- survfit(Surv(time = time, event = status) ~ 1, data = diabetic)
ggsurvplot(KM)$plot +
labs(y = "Survival probability", x = "Time (months)") +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
library(tidyverse)
temp <- read_csv("/Users/Josh/Downloads/Geospatial Data in R_participants.csv")
temp
temp$groups <- sample(1:4, nrow(temp), replace = TRUE)
table(temp$groups)
temp$groups <- sample(1:4, nrow(temp), replace = TRUE)
table(temp$groups)
temp$groups <- sample(1:5, nrow(temp), replace = TRUE)
table(temp$groups)
temp$groups <- sample(1:5, nrow(temp), replace = TRUE)
table(temp$groups)
temp$groups <- sample(1:5, nrow(temp), replace = TRUE)
table(temp$groups)
temp$groups <- sample(1:5, nrow(temp), replace = TRUE)
table(temp$groups)
temp$groups <- sample(1:5, nrow(temp), replace = TRUE)
table(temp$groups)
temp$groups <- sample(1:5, nrow(temp), replace = TRUE)
table(temp$groups)
temp$groups <- sample(1:5, nrow(temp), replace = TRUE)
table(temp$groups)
temp$groups <- sample(1:nrow(temp), nrow(temp), replace = FALSE)
temp <- temp |> arrange(groups)
temp
temp$groups <- ceiling(temp$groups/4)
temp
temp$groups <- sample(1:nrow(temp), nrow(temp), replace = FALSE)
temp <- temp |> arrange(groups)
temp$groups <- ceiling(temp$groups/5)
temp
temp$groups <- sample(1:nrow(temp), nrow(temp), replace = FALSE)
temp <- temp |> arrange(groups)
temp$groups <- ceiling(temp$groups/3)
temp
temp$group[temp$`ID number`==202331010] <- 4
temp$groups[temp$`ID number`==202331010] <- 4
temp$groups[temp$`ID number`==202432081] <- 3
table(temp$groups)
write_csv("/Users/Josh/Downloads/groups.csv")
write_csv(temp, "/Users/Josh/Downloads/groups.csv")
temp
temp <- temp |> select(-group)
temp
write_csv(temp, "/Users/Josh/Downloads/groups.csv")
getwd()
getwd()
getwd()
library(nycflights13)
glimpse(flights)
library(tidyverse)
glimpse(flights)
table <- flights |> group_by(origin) |> summarize(meandep = mean(dep_delay, na.rm = TRUE))
table
install.packages("kableExtra")
install.packages("kableExtra")
library(terra)
?aggregate
library(sf)
?aggregate
?aggregate
library(terra)
library(sf)
?aggregate
?terra::aggregate
#| label: setup
#| include: false
knitr::knit_hooks$set(crop = knitr::hook_pdfcrop)
library(tidyverse)
library(sf)
library(terra)
library(tidyterra)
library(cowplot)
library(kableExtra)
library(haven)
Sys.setenv("RETICULATE_PYTHON" = "~/Library/r-miniconda-arm64/envs/RGEEDIM/bin/python3.9")
library(rgeedim)
# short duration token
gd_authenticate(auth_mode = "gcloud")
# initialize and should be good to go
gd_initialize()
kdisgreen <- "#006334"
accent <- "#340063"
accent2 <- "#633400"
kdisgray <- "#A7A9AC"
kshape <- read_sf("vectorfilesdata/kshape.shp")
# short duration token
gd_authenticate(auth_mode = "gcloud")
kshape <- read_sf("vectorfilesdata/kshape.shp")
kgrid <- rast(kshape, res = 10000)
kgrid <- as.polygons(kgrid)
kgrid$id <- 1:nrow(kgrid)
kgrid
kshape
kshape <- vect("vectorfilesdata/kshape.shp")
kgrid <- rast(kshape, res = 10000)
kgrid <- as.polygons(kgrid)
kgrid$id <- 1:nrow(kgrid)
intersection <- intersect(kshape, kgrid)
intersection
kgrid <- kgrid |>
filter(id %in% intersection$id)
ggplot() + geom_spatvector(data = kgrid)
ggplot(kgrid) +
geom_spatvector() +
theme_bw()
plot(kgrid)
#| echo: false
#| eval: true
#| include: true
#| fig-align: center
#| crop: true
kgrid <- rast(kshape, res = 5000)
?gd_install
setwd("~/Dropbox/Papers/UN-SAE/workshops/asia/bangkokworkshop")
# MPC
library(rstac)
library(terra)
# let's use Korea
kgrid <- vect("vectorfilesdata/kgrid.shp")
# to lon/lat
kgrid <- project(kgrid, "EPSG:4326")
kgridbox <- ext(kgrid)
# let's pull some pollution data
s_obj <- stac("https://planetarycomputer.microsoft.com/api/stac/v1")
it_obj <- s_obj %>%
stac_search(collections = "io-lulc-annual-v02",
bbox = c(kgridbox[1], kgridbox[3], kgridbox[2], kgridbox[4]),
datetime = "2019-01-01/2019-12-31",
limit = 1000) %>%
get_request() %>%
items_sign(sign_fn = sign_planetary_computer())
# fewer things here
it_obj
# let's just download the first one
url <- paste0("/vsicurl/", it_obj$features[[1]]$assets$data$href)
# also get the bounding box for that area
bb <- it_obj$features[[1]]$bbox
# load raster
rall <- rast(url)
rall
head(rall[["52S_20190101-20200101"]])
summary(rall[["52S_20190101-20200101"]])
temp <- rast("/Users/Josh/Downloads/BNU_FGS_CCNL_Export.tif")
temp
plot(temp)
temp <- rast('/Users/Josh/Downloads/BNU_FGS_CCNL_Export(1).tif')
plot(temp)
temp <- rast("/Users/Josh/Downloads/Total_Precipitation_2019.tif")
plot(temp)
# MPC
library(rstac)
library(terra)
# let's use Korea
kgrid <- vect("vectorfilesdata/kgrid.shp")
# to lon/lat
kgrid <- project(kgrid, "EPSG:4326")
kgridbox <- ext(kgrid)
# let's pull some pollution data
s_obj <- stac("https://planetarycomputer.microsoft.com/api/stac/v1")
# let's pull some pollution data
s_obj <- stac("https://planetarycomputer.microsoft.com/api/stac/v1")
it_obj <- s_obj %>%
stac_search(collections = "sentinel-5p-l2-netcdf",
bbox = c(kgridbox[1], kgridbox[3], kgridbox[2], kgridbox[4]),
datetime = "2019-01-01/2019-12-31",
limit = 1000) %>%
get_request() %>%
items_sign(sign_fn = sign_planetary_computer())
# many things!
it_obj
it_obj$features[[1]]
names(it_obj$features[[1]])
it_obj$features[[1]]$assets
it_obj$features[[1]]$assets$so2$href
# let's just download the first one
url <- paste0("/vsicurl/", it_obj$features[[1]]$assets$so2$href)
# also get the bounding box for that area
bb <- it_obj$features[[1]]$bbox
# load raster
rall <- rast(url)
